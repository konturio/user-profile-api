plugins {
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.3.0'
    id 'de.undercouch.download' version '5.1.2'
    id 'io.sentry.jvm.gradle' version '4.3.0'
}

group = 'io.kontur.userprofile'
version = '0.9.3'
sourceCompatibility = '17' // Keycloak image uses 17, so update JDK in Keycloak before changing this
targetCompatibility = '17'
String imageTag = System.getenv("IMAGE_TAG") ?: 'latest'

repositories {
    mavenCentral()
    maven {
        url 'https://nexus.kontur.io:8084'
        credentials {
            username = System.getenv()['NEXUS_READER'] ?: "".trim()
            password = System.getenv()['NEXUS_READER_PASS'] ?: "".trim()
        }
    }
    maven {
        url 'https://nexus.kontur.io:8085'
        credentials {
            username = System.getenv()['NEXUS_DEPLOYER'] ?: "".trim()
            password = System.getenv()['NEXUS_DEPLOYER_PASS'] ?: "".trim()
        }
    }
}

sentry {
  // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
  // This enables source context, allowing you to see your source
  // code as part of your stack traces in Sentry.
  includeSourceContext = true

  org = System.getenv("SENTRY_ORG")
  projectName = "user-profile-api"
  authToken = System.getenv("SENTRY_AUTH_TOKEN")
  includeSourceContext = System.getenv("SENTRY_AUTH_TOKEN") ? true : false
}

dependencies {
    //model
    implementation project(":model")
    implementation 'org.wololo:jts2geojson:0.17.0'

    // jakarta
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.transaction:jakarta.transaction-api:2.0.1'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    //json logging
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.0.1'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.4.12'

    //lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'

    //spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    //health
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.4'

    //liquibase
    implementation 'org.liquibase:liquibase-core:4.26.0'
    implementation 'org.liquibase.ext:liquibase-hibernate6:4.26.0'

    //tests
    implementation 'junit:junit:4.13.2'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.data:spring-data-jdbc'
    testImplementation 'org.testcontainers:postgresql:1.19.6'

    //postgresql
    implementation 'org.postgresql:postgresql:42.7.2'

    //HTTP client
    implementation 'org.apache.httpcomponents.client5:httpclient5'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group.startsWith('com.fasterxml.jackson')) {
            details.useVersion '2.14.0-rc2'
            details.because 'fixes critical vulnerability in lower versions'
        }
    }
}

checkstyle {
    configFile file("codestyle.xml")
}

test {
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")
}

jar {
    enabled = false
}

jacocoTestReport {
    reports {
        csv.required = true
        csv.destination file("${buildDir}/jacoco.csv")
    }
}

jib {
    from {
        image = 'nexus.kontur.io:8084/library/openjdk:17-alpine'
        auth {
            username = System.getenv()['NEXUS_READER'] ?: "".trim()
            password = System.getenv()['NEXUS_READER_PASS'] ?: "".trim()
        }
    }
    to {
        image = "nexus.kontur.io:8085/konturdev/${project.name}:${imageTag}"
        tags = ["${imageTag}"]
        auth {
            username = System.getenv()['NEXUS_DEPLOYER'] ?: "".trim()
            password = System.getenv()['NEXUS_DEPLOYER_PASS'] ?: "".trim()
        }
    }
    container {
        mainClass 'io.kontur.userprofile.UserProfileServiceApplication'

        jvmFlags = ['-server', '-Xms256m', '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError',
                    '-javaagent:/opentelemetry/opentelemetry-javaagent.jar',
                    '-XX:HeapDumpPath=/tmp/ups_oom.hprof', '-XX:MaxMetaspaceSize=384m']
        //if GC log is required: '-Xlog:gc*:file=/tmp/user-profile-api.GC.log'
    }
    extraDirectories {
        paths {
            path {
                from = "${buildDir}/../jib/"
                into = '/opentelemetry/'
            }
        }
    }
}

task downloadFile(type: Download) {
    src 'https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.16.0/opentelemetry-javaagent.jar'
    dest "${buildDir}/../jib/opentelemetry-javaagent.jar"
    onlyIfModified true
}

task verifyFile(type: Verify, dependsOn: downloadFile) {
    dependsOn downloadFile
    src new File("${buildDir}/../jib/", 'opentelemetry-javaagent.jar')
    algorithm 'MD5'
    checksum '4f97ebd74d075e60c76ecdf47b61006a'
}

tasks.jib.dependsOn(verifyFile)
tasks.jibDockerBuild.dependsOn(verifyFile)
